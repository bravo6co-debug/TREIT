name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  # Install dependencies and cache them
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install app dependencies
        run: |
          cd treit-app && npm ci
          cd ../treit-advertiser && npm ci
          cd ../treit-admin && npm ci

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            treit-app/node_modules
            treit-advertiser/node_modules
            treit-admin/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  # Lint and type checking
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        app: [treit-app, treit-advertiser, treit-admin]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            treit-app/node_modules
            treit-advertiser/node_modules
            treit-admin/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies if cache miss
        run: |
          npm ci
          cd ${{ matrix.app }} && npm ci

      - name: Run TypeScript check
        run: cd ${{ matrix.app }} && npm run typecheck

      - name: Run ESLint (if configured)
        run: cd ${{ matrix.app }} && npm run lint || echo "Lint not configured"
        continue-on-error: true

  # Build applications
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        app: [treit-app, treit-advertiser, treit-admin]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            treit-app/node_modules
            treit-advertiser/node_modules
            treit-admin/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies if cache miss
        run: |
          npm ci
          cd ${{ matrix.app }} && npm ci

      - name: Build application
        run: cd ${{ matrix.app }} && npm run build
        env:
          VITE_SUPABASE_URL: https://test-project.supabase.co
          VITE_SUPABASE_ANON_KEY: test-anon-key
          VITE_APP_ENV: test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.app }}
          path: ${{ matrix.app }}/dist
          retention-days: 1

  # Unit and Integration Tests
  test-unit:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            treit-app/node_modules
            treit-advertiser/node_modules
            treit-admin/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies if cache miss
        run: |
          npm ci
          cd treit-app && npm ci
          cd ../treit-advertiser && npm ci
          cd ../treit-admin && npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local development setup
        run: supabase start

      - name: Run database migrations
        run: supabase db reset

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          retention-days: 5

  # E2E Tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            treit-app/node_modules
            treit-advertiser/node_modules
            treit-admin/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies if cache miss
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local development setup
        run: supabase start

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Start applications for E2E testing
        run: |
          cd treit-app && npx serve -s dist -l 3000 &
          cd treit-advertiser && npx serve -s dist -l 3001 &
          cd treit-admin && npx serve -s dist -l 3002 &
          sleep 10

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          SUPABASE_URL: http://localhost:54321

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/
          retention-days: 5

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Audit npm dependencies
        run: |
          npm audit --audit-level=high
          cd treit-app && npm audit --audit-level=high
          cd ../treit-advertiser && npm audit --audit-level=high
          cd ../treit-admin && npm audit --audit-level=high

  # Docker build test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        app: [treit-app, treit-advertiser, treit-admin]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.app }}
          file: ./${{ matrix.app }}/Dockerfile
          push: false
          tags: treitmaster-${{ matrix.app }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d -p 8080:80 --name test-${{ matrix.app }} \
            -e VITE_SUPABASE_URL=http://localhost \
            -e VITE_SUPABASE_ANON_KEY=test-key \
            treitmaster-${{ matrix.app }}:test
          sleep 5
          curl -f http://localhost:8080/health || exit 1
          docker stop test-${{ matrix.app }}

  # Performance testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          merge-multiple: true

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Start static server
        run: |
          npx serve -s treit-app -l 3000 &
          sleep 5

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Notify on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, build, test-unit, test-e2e, security, docker]
    if: always() && github.event_name == 'push'
    steps:
      - name: Notify Slack on Success
        if: needs.lint.result == 'success' && needs.build.result == 'success' && needs.test-unit.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#treitmaster-ci'
          text: '✅ CI Pipeline passed for TreitMaster'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: needs.lint.result == 'failure' || needs.build.result == 'failure' || needs.test-unit.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#treitmaster-ci'
          text: '❌ CI Pipeline failed for TreitMaster'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}