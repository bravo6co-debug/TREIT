name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: treitmaster

jobs:
  # Build and push Docker images
  build-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    strategy:
      matrix:
        app: [treit-app, treit-advertiser, treit-admin]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.app }}
          file: ./${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.treitmaster.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy User App to Vercel
        run: |
          cd treit-app
          vercel --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --confirm
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_USER }}

      - name: Deploy Advertiser App to Vercel
        run: |
          cd treit-advertiser
          vercel --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --confirm
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_ADVERTISER }}

      - name: Deploy Admin App to Vercel
        run: |
          cd treit-admin
          vercel --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --confirm
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_ADMIN }}

      - name: Deploy Supabase Functions
        run: |
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF_STAGING }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Run database migrations
        run: |
          supabase db push --project-ref ${{ secrets.SUPABASE_PROJECT_REF_STAGING }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  # Smoke tests for staging
  test-staging:
    name: Staging Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run staging smoke tests
        run: npx playwright test --config=playwright.staging.config.ts
        env:
          STAGING_USER_URL: https://staging-app.treitmaster.com
          STAGING_ADVERTISER_URL: https://staging-advertiser.treitmaster.com
          STAGING_ADMIN_URL: https://staging-admin.treitmaster.com

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-test-results
          path: test-results/

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://treitmaster.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy User App to Production
        run: |
          cd treit-app
          vercel --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --prod --confirm
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_USER }}

      - name: Deploy Advertiser App to Production
        run: |
          cd treit-advertiser
          vercel --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --prod --confirm
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_ADVERTISER }}

      - name: Deploy Admin App to Production
        run: |
          cd treit-admin
          vercel --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --prod --confirm
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_ADMIN }}

      - name: Deploy Supabase Functions to Production
        run: |
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF_PRODUCTION }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Run production database migrations
        run: |
          supabase db push --project-ref ${{ secrets.SUPABASE_PROJECT_REF_PRODUCTION }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  # Production health check
  health-check:
    name: Production Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    steps:
      - name: Check User App Health
        run: |
          curl -f https://app.treitmaster.com/health || exit 1
          echo "User app is healthy"

      - name: Check Advertiser App Health
        run: |
          curl -f https://advertiser.treitmaster.com/health || exit 1
          echo "Advertiser app is healthy"

      - name: Check Admin App Health
        run: |
          curl -f https://admin.treitmaster.com/health || exit 1
          echo "Admin app is healthy"

      - name: Check API Health
        run: |
          curl -f https://api.treitmaster.com/health || exit 1
          echo "API is healthy"

  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [health-check]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "Generating changelog from $LATEST_TAG to ${{ github.ref_name }}"
          
          # Generate changelog
          CHANGELOG=$(git log $LATEST_TAG..${{ github.ref_name }} --pretty=format:"- %s (%an)" --no-merges)
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Deployment Information
            - **User App**: https://app.treitmaster.com
            - **Advertiser App**: https://advertiser.treitmaster.com
            - **Admin App**: https://admin.treitmaster.com
            
            ## Docker Images
            - `ghcr.io/${{ github.repository }}/treit-app:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/treit-advertiser:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/treit-admin:${{ github.ref_name }}`
          draft: false
          prerelease: false

  # Rollback capability
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    environment:
      name: production-rollback
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Rollback deployments
        run: |
          # Get previous successful deployment
          PREV_DEPLOYMENT=$(vercel ls --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} | grep "READY" | head -2 | tail -1 | awk '{print $1}')
          
          # Promote previous deployment to production
          vercel promote $PREV_DEPLOYMENT --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }}

  # Notifications
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production, health-check]
    if: always()
    steps:
      - name: Notify Slack on Success
        if: needs.deploy-production.result == 'success' && needs.health-check.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#treitmaster-deployments'
          text: |
            🚀 TreitMaster successfully deployed to production!
            
            **Apps:**
            • User App: https://app.treitmaster.com
            • Advertiser App: https://advertiser.treitmaster.com
            • Admin App: https://admin.treitmaster.com
            
            **Version:** ${{ github.ref_name }}
            **Deployed by:** ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: needs.deploy-production.result == 'failure' || needs.health-check.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#treitmaster-deployments'
          text: |
            ❌ TreitMaster deployment to production failed!
            
            **Failed Step:** ${{ needs.deploy-production.result == 'failure' && 'Deployment' || 'Health Check' }}
            **Version:** ${{ github.ref_name }}
            **Triggered by:** ${{ github.actor }}
            
            Please check the deployment logs and take necessary action.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send email notification
        if: needs.deploy-production.result == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 TreitMaster Production Deployment Failed"
          body: |
            The TreitMaster production deployment has failed.
            
            Details:
            - Repository: ${{ github.repository }}
            - Branch/Tag: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Triggered by: ${{ github.actor }}
            - Workflow: ${{ github.workflow }}
            
            Please check the GitHub Actions logs for more details:
            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: devops@treitmaster.com
          from: github-actions@treitmaster.com